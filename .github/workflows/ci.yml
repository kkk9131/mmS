name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || {
            echo "Security vulnerabilities found!"
            npm audit --json > audit-report.json
            exit 1
          }
      
      - name: Upload audit report on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 30
  
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check code formatting with Prettier
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}"
      
      - name: Run TypeScript type check
        run: npm run type-check
      
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [security-check, lint-and-typecheck]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Skip tests (not configured yet)
        run: echo "Tests will be added in future iterations"
      
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [security-check, lint-and-typecheck, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build:web
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Deploy to staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          # Example: aws s3 sync dist/ s3://staging-bucket/
          # Example: gcloud app deploy --project=staging-project
          echo "url=https://staging.example.com" >> $GITHUB_OUTPUT
      
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful!"
          else
            echo "❌ Staging deployment failed!"
          fi
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist/
      
      - name: Backup current production
        run: |
          echo "Creating production backup..."
          # Add backup commands here
          # Example: aws s3 sync s3://prod-bucket/ s3://backup-bucket/$(date +%Y%m%d-%H%M%S)/
      
      - name: Deploy to production
        id: deploy
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # Example: aws s3 sync dist/ s3://prod-bucket/
          # Example: gcloud app deploy --project=prod-project
          echo "url=https://app.example.com" >> $GITHUB_OUTPUT
      
      - name: Run health checks
        run: |
          echo "Running production health checks..."
          # Add health check commands here
          # Example: curl -f https://app.example.com/health || exit 1
      
      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed! Initiating rollback..."
          # Add rollback commands here
          # Example: aws s3 sync s3://backup-bucket/latest/ s3://prod-bucket/
      
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful!"
            # Add success notification (Slack, email, etc.)
          else
            echo "❌ Production deployment failed! Rollback initiated."
            # Add failure notification (Slack, email, etc.)
          fi