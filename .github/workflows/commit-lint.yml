name: Commit Message Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:
  commitlint:
    name: Validate Commit Messages
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install commitlint
        run: |
          npm install --save-dev @commitlint/cli @commitlint/config-conventional
      
      - name: Create commitlint config
        run: |
          echo "module.exports = {
            extends: ['@commitlint/config-conventional'],
            rules: {
              'type-enum': [
                2,
                'always',
                [
                  'feat',     // 新機能
                  'fix',      // バグ修正
                  'docs',     // ドキュメントのみの変更
                  'style',    // コードの意味に影響しない変更（空白、フォーマット等）
                  'refactor', // バグ修正や機能追加を伴わないコード変更
                  'test',     // テストの追加や既存テストの修正
                  'chore',    // ビルドプロセスやツールの変更
                  'perf',     // パフォーマンス改善
                  'ci',       // CI設定の変更
                  'revert',   // 以前のコミットの取り消し
                  'build'     // ビルドシステムや外部依存関係の変更
                ]
              ],
              'type-case': [2, 'always', 'lower-case'],
              'type-empty': [2, 'never'],
              'subject-empty': [2, 'never'],
              'subject-case': [2, 'never', ['sentence-case', 'start-case', 'pascal-case', 'upper-case']],
              'subject-full-stop': [2, 'never', '.'],
              'header-max-length': [2, 'always', 100],
              'body-leading-blank': [1, 'always'],
              'body-max-line-length': [2, 'always', 100],
              'footer-leading-blank': [1, 'always'],
              'footer-max-line-length': [2, 'always', 100]
            },
            helpUrl: 'https://www.conventionalcommits.org/'
          };" > commitlint.config.js
      
      - name: Validate PR title
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "Validating PR title: $PR_TITLE"
          echo "$PR_TITLE" | npx commitlint
      
      - name: Get commit messages
        id: get_commits
        run: |
          # Get all commits in the PR
          COMMITS=$(git log --format=%B origin/${{ github.base_ref }}..HEAD)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Validate commit messages
        run: |
          # Validate each commit message
          git log --format=%B origin/${{ github.base_ref }}..HEAD | while read -r line; do
            if [ -n "$line" ]; then
              echo "Validating: $line"
              echo "$line" | npx commitlint || {
                echo "❌ Invalid commit message format!"
                echo ""
                echo "📝 Conventional Commits形式でコミットメッセージを記述してください:"
                echo ""
                echo "  <type>(<scope>): <subject>"
                echo ""
                echo "使用可能なタイプ:"
                echo "  - feat: 新機能"
                echo "  - fix: バグ修正"
                echo "  - docs: ドキュメントのみの変更"
                echo "  - style: コードの意味に影響しない変更"
                echo "  - refactor: バグ修正や機能追加を伴わないコード変更"
                echo "  - test: テストの追加や修正"
                echo "  - chore: ビルドプロセスやツールの変更"
                echo "  - perf: パフォーマンス改善"
                echo "  - ci: CI設定の変更"
                echo ""
                echo "例:"
                echo "  feat: ユーザー認証機能を追加"
                echo "  fix(auth): ログイン時のエラーを修正"
                echo "  docs: READMEにインストール手順を追加"
                echo ""
                echo "詳細: https://www.conventionalcommits.org/"
                exit 1
              }
            fi
          done
      
      - name: Check for breaking changes
        run: |
          # Check for breaking changes in commit messages
          if git log --format=%B origin/${{ github.base_ref }}..HEAD | grep -E "(BREAKING CHANGE:|^[a-z]+!:)"; then
            echo "⚠️  破壊的変更が検出されました！"
            echo "PRの説明に影響範囲と移行方法を記載してください。"
          fi
      
      - name: Generate commit summary
        if: always()
        run: |
          echo "## 📊 コミットサマリー" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count commits by type
          echo "### コミットタイプ別集計:" >> $GITHUB_STEP_SUMMARY
          echo "| タイプ | 件数 |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------|" >> $GITHUB_STEP_SUMMARY
          
          for type in feat fix docs style refactor test chore perf ci; do
            count=$(git log --format=%s origin/${{ github.base_ref }}..HEAD | grep -c "^$type:" || true)
            if [ $count -gt 0 ]; then
              echo "| $type | $count |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # List all commits
          echo "### コミット一覧:" >> $GITHUB_STEP_SUMMARY
          git log --format="- %s (%h)" origin/${{ github.base_ref }}..HEAD >> $GITHUB_STEP_SUMMARY