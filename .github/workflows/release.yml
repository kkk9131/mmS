name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/release.yml'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Get current version
        id: current_version
        run: |
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      - name: Analyze commits for version bump
        id: analyze_commits
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges)
          fi
          
          # Determine version bump type based on commit messages
          MAJOR=false
          MINOR=false
          PATCH=false
          
          while IFS= read -r commit; do
            if [[ "$commit" =~ ^(feat|feature)!:|BREAKING[[:space:]]CHANGE: ]]; then
              MAJOR=true
            elif [[ "$commit" =~ ^(feat|feature): ]]; then
              MINOR=true
            elif [[ "$commit" =~ ^(fix|bugfix|perf|refactor): ]]; then
              PATCH=true
            fi
          done <<< "$COMMITS"
          
          if [ "$MAJOR" = true ]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [ "$MINOR" = true ]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          elif [ "$PATCH" = true ]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        id: bump_version
        run: |
          npm version ${{ steps.analyze_commits.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      
      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Generate changelog content
          echo "# Changelog" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          echo "## v${{ steps.bump_version.outputs.new_version }} - $(date +'%Y-%m-%d')" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Categorize commits
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%h %s" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%h %s" --no-merges)
          fi
          
          # Initialize categories
          FEATURES=""
          FIXES=""
          DOCS=""
          STYLE=""
          REFACTOR=""
          PERF=""
          TEST=""
          CHORE=""
          CI=""
          BREAKING=""
          
          # Categorize each commit
          while IFS= read -r commit; do
            HASH=$(echo "$commit" | cut -d' ' -f1)
            MSG=$(echo "$commit" | cut -d' ' -f2-)
            
            if [[ "$MSG" =~ ^(feat|feature)!:|BREAKING[[:space:]]CHANGE: ]]; then
              BREAKING="${BREAKING}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^(feat|feature): ]]; then
              FEATURES="${FEATURES}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^(fix|bugfix): ]]; then
              FIXES="${FIXES}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^docs: ]]; then
              DOCS="${DOCS}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^style: ]]; then
              STYLE="${STYLE}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^refactor: ]]; then
              REFACTOR="${REFACTOR}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^perf: ]]; then
              PERF="${PERF}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^test: ]]; then
              TEST="${TEST}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^chore: ]]; then
              CHORE="${CHORE}- ${MSG} (${HASH})\n"
            elif [[ "$MSG" =~ ^ci: ]]; then
              CI="${CI}- ${MSG} (${HASH})\n"
            fi
          done <<< "$COMMITS"
          
          # Write categorized commits to changelog
          if [ -n "$BREAKING" ]; then
            echo "### 🚨 Breaking Changes" >> CHANGELOG_TEMP.md
            echo -e "$BREAKING" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$FEATURES" ]; then
            echo "### ✨ Features" >> CHANGELOG_TEMP.md
            echo -e "$FEATURES" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$FIXES" ]; then
            echo "### 🐛 Bug Fixes" >> CHANGELOG_TEMP.md
            echo -e "$FIXES" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$PERF" ]; then
            echo "### ⚡ Performance Improvements" >> CHANGELOG_TEMP.md
            echo -e "$PERF" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$REFACTOR" ]; then
            echo "### ♻️ Refactoring" >> CHANGELOG_TEMP.md
            echo -e "$REFACTOR" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$DOCS" ]; then
            echo "### 📝 Documentation" >> CHANGELOG_TEMP.md
            echo -e "$DOCS" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$STYLE" ]; then
            echo "### 💄 Style" >> CHANGELOG_TEMP.md
            echo -e "$STYLE" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$TEST" ]; then
            echo "### ✅ Tests" >> CHANGELOG_TEMP.md
            echo -e "$TEST" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$CHORE" ]; then
            echo "### 🔧 Chores" >> CHANGELOG_TEMP.md
            echo -e "$CHORE" >> CHANGELOG_TEMP.md
          fi
          
          if [ -n "$CI" ]; then
            echo "### 👷 CI/CD" >> CHANGELOG_TEMP.md
            echo -e "$CI" >> CHANGELOG_TEMP.md
          fi
          
          # Save changelog content for release body
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG_TEMP.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request for version bump
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to v${{ steps.bump_version.outputs.new_version }}"
          title: "chore: Release v${{ steps.bump_version.outputs.new_version }}"
          body: |
            ## Release v${{ steps.bump_version.outputs.new_version }}
            
            This PR bumps the version from v${{ steps.current_version.outputs.version }} to v${{ steps.bump_version.outputs.new_version }}.
            
            ${{ steps.changelog.outputs.changelog }}
            
            ---
            *This PR was automatically created by the release workflow.*
          branch: release/v${{ steps.bump_version.outputs.new_version }}
          delete-branch: true
          labels: |
            release
            automated
      
      - name: Create Release Tag
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a v${{ steps.bump_version.outputs.new_version }} -m "Release v${{ steps.bump_version.outputs.new_version }}"
          git push origin v${{ steps.bump_version.outputs.new_version }}
      
      - name: Create GitHub Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          release_name: Release v${{ steps.bump_version.outputs.new_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
      
      - name: Upload Release Assets
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          # Build release assets
          npm run build
          
          # Create release archive
          tar -czf release-v${{ steps.bump_version.outputs.new_version }}.tar.gz dist/
          
          # Upload using GitHub CLI
          gh release upload v${{ steps.bump_version.outputs.new_version }} \
            release-v${{ steps.bump_version.outputs.new_version }}.tar.gz \
            --clobber
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}