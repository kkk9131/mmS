import React from 'react';
import { View, Text, StyleSheet, ScrollView } from 'react-native';
import { colors } from '../theme/colors';
import { typography } from '../theme/typography';

interface AccessibleDataDisplayProps {
  data: any[];
  title: string;
  emptyMessage?: string;
}

export const AccessibleDataDisplay: React.FC<AccessibleDataDisplayProps> = ({
  data,
  title,
  emptyMessage = '„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'
}) => {
  const renderDataItem = (item: any, index: number) => {
    return (
      <View 
        key={item.id || index}
        style={styles.dataItem}
        accessible={true}
        accessibilityRole="button"
        accessibilityLabel={`È†ÖÁõÆ ${index + 1}: ${item.content || item.title || item.name || 'ÂÜÖÂÆπ'}`}
        accessibilityHint="Ë©≥Á¥∞„ÇíË°®Á§∫„Åô„Çã„Å´„ÅØ„ÉÄ„Éñ„É´„Çø„ÉÉ„Éó„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
      >
        {/* „É¶„Éº„Ç∂„ÉºÊÉÖÂ†± */}
        {item.authorName && (
          <Text 
            style={styles.authorName}
            accessible={true}
            accessibilityLabel={`ÊäïÁ®øËÄÖ: ${item.authorName}`}
          >
            {item.authorName}
          </Text>
        )}
        
        {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
        <Text 
          style={styles.content}
          accessible={true}
          accessibilityRole="text"
          accessibilityLabel={`ÂÜÖÂÆπ: ${item.content || item.description || item.text || ''}`}
        >
          {item.content || item.description || item.text || item.title || 'ÂÜÖÂÆπ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì'}
        </Text>
        
        {/* „É°„Çø„Éá„Éº„Çø */}
        <View style={styles.metadata}>
          {item.createdAt && (
            <Text 
              style={styles.metaText}
              accessible={true}
              accessibilityLabel={`‰ΩúÊàêÊó•ÊôÇ: ${new Date(item.createdAt).toLocaleDateString('ja-JP')}`}
            >
              {new Date(item.createdAt).toLocaleDateString('ja-JP')}
            </Text>
          )}
          
          {item.likesCount !== undefined && (
            <Text 
              style={styles.metaText}
              accessible={true}
              accessibilityLabel={`„ÅÑ„ÅÑ„Å≠Êï∞: ${item.likesCount}‰ª∂`}
            >
              üëç {item.likesCount}
            </Text>
          )}
          
          {item.commentsCount !== undefined && (
            <Text 
              style={styles.metaText}
              accessible={true}
              accessibilityLabel={`„Ç≥„É°„É≥„ÉàÊï∞: ${item.commentsCount}‰ª∂`}
            >
              üí¨ {item.commentsCount}
            </Text>
          )}
        </View>
      </View>
    );
  };

  return (
    <View 
      style={styles.container}
      accessible={true}
      accessibilityRole="list"
      accessibilityLabel={`${title}: ${data.length}‰ª∂„ÅÆ„Éá„Éº„Çø`}
    >
      <Text 
        style={styles.title}
        accessible={true}
        accessibilityRole="header"
        accessibilityLevel={2}
      >
        {title}
      </Text>
      
      {data.length === 0 ? (
        <View 
          style={styles.emptyContainer}
          accessible={true}
          accessibilityRole="text"
          accessibilityLabel={emptyMessage}
        >
          <Text style={styles.emptyMessage}>{emptyMessage}</Text>
        </View>
      ) : (
        <ScrollView 
          style={styles.dataList}
          accessible={true}
          accessibilityLabel={`${data.length}‰ª∂„ÅÆ„Éá„Éº„Çø„ÅÆ„É™„Çπ„Éà`}
          contentContainerStyle={styles.scrollContent}
        >
          {data.map(renderDataItem)}
        </ScrollView>
      )}
      
      {/* „Éá„Éº„ÇøÁµ±Ë®à */}
      <View 
        style={styles.statistics}
        accessible={true}
        accessibilityRole="summary"
        accessibilityLabel={`Áµ±Ë®àÊÉÖÂ†±: ÂêàË®à${data.length}‰ª∂`}
      >
        <Text style={styles.statisticsText}>ÂêàË®à: {data.length}‰ª∂</Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: colors.neutral.white,
    borderRadius: 12,
    padding: 16,
    marginVertical: 8,
    shadowColor: colors.neutral.black,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  title: {
    fontSize: typography.fontSize.xl,
    fontWeight: typography.fontWeight.bold,
    color: colors.text.primary,
    marginBottom: 16,
    textAlign: 'center',
  },
  dataList: {
    maxHeight: 400,
  },
  scrollContent: {
    paddingBottom: 8,
  },
  dataItem: {
    backgroundColor: colors.neutral.background,
    borderRadius: 8,
    padding: 12,
    marginBottom: 8,
    borderLeftWidth: 3,
    borderLeftColor: colors.primary.main,
  },
  authorName: {
    fontSize: typography.fontSize.sm,
    fontWeight: typography.fontWeight.semibold,
    color: colors.primary.main,
    marginBottom: 4,
  },
  content: {
    fontSize: typography.fontSize.md,
    color: colors.text.primary,
    lineHeight: 20,
    marginBottom: 8,
  },
  metadata: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    flexWrap: 'wrap',
  },
  metaText: {
    fontSize: typography.fontSize.xs,
    color: colors.text.secondary,
    marginRight: 12,
  },
  emptyContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 40,
  },
  emptyMessage: {
    fontSize: typography.fontSize.md,
    color: colors.text.secondary,
    textAlign: 'center',
  },
  statistics: {
    borderTopWidth: 1,
    borderTopColor: colors.neutral.gray200,
    paddingTop: 12,
    marginTop: 12,
    alignItems: 'center',
  },
  statisticsText: {
    fontSize: typography.fontSize.sm,
    color: colors.text.secondary,
    fontWeight: typography.fontWeight.medium,
  },
});