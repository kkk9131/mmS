import { Dimensions, Platform } from 'react-native';

/**
 * „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£Èñ¢Êï∞Áæ§
 */

/**
 * ÊúÄÂ∞è„Çø„ÉÉ„Éó„Çø„Éº„Ç≤„ÉÉ„Éà„Çµ„Ç§„Ç∫Ôºà48dpÔºâ
 */
export const MIN_TAP_TARGET_SIZE = 48;

/**
 * WCAGÊ∫ñÊã†„ÅÆ„Ç≥„É≥„Éà„É©„Çπ„ÉàÊØî
 */
export const CONTRAST_RATIOS = {
  AA_NORMAL: 4.5,      // WCAG AA ÈÄöÂ∏∏„ÉÜ„Ç≠„Çπ„Éà
  AA_LARGE: 3.0,       // WCAG AA Â§ß„Åç„Å™„ÉÜ„Ç≠„Çπ„Éà
  AAA_NORMAL: 7.0,     // WCAG AAA ÈÄöÂ∏∏„ÉÜ„Ç≠„Çπ„Éà
  AAA_LARGE: 4.5       // WCAG AAA Â§ß„Åç„Å™„ÉÜ„Ç≠„Çπ„Éà
} as const;

/**
 * Ëâ≤„ÇíRGBÂÄ§„Å´Â§âÊèõ
 */
export const hexToRgb = (hex: string): { r: number; g: number; b: number } | null => {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result ? {
    r: parseInt(result[1], 16),
    g: parseInt(result[2], 16),
    b: parseInt(result[3], 16)
  } : null;
};

/**
 * Áõ∏ÂØæËºùÂ∫¶„ÇíË®àÁÆó
 */
export const getRelativeLuminance = (r: number, g: number, b: number): number => {
  const [rs, gs, bs] = [r, g, b].map(c => {
    c = c / 255;
    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  });
  
  return 0.2126 * rs + 0.7152 * gs + 0.0722 * bs;
};

/**
 * „Ç≥„É≥„Éà„É©„Çπ„ÉàÊØî„ÇíË®àÁÆó
 */
export const calculateContrastRatio = (color1: string, color2: string): number => {
  const rgb1 = hexToRgb(color1);
  const rgb2 = hexToRgb(color2);
  
  if (!rgb1 || !rgb2) return 1;
  
  const l1 = getRelativeLuminance(rgb1.r, rgb1.g, rgb1.b);
  const l2 = getRelativeLuminance(rgb2.r, rgb2.g, rgb2.b);
  
  const lighter = Math.max(l1, l2);
  const darker = Math.min(l1, l2);
  
  return (lighter + 0.05) / (darker + 0.05);
};

/**
 * „Ç≥„É≥„Éà„É©„Çπ„ÉàÊØî„ÅåWCAGÂü∫Ê∫ñ„ÇíÊ∫Ä„Åü„Åó„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
 */
export const isContrastCompliant = (
  foreground: string, 
  background: string, 
  level: 'AA' | 'AAA' = 'AA',
  isLargeText: boolean = false
): boolean => {
  const ratio = calculateContrastRatio(foreground, background);
  
  if (level === 'AA') {
    return isLargeText ? ratio >= CONTRAST_RATIOS.AA_LARGE : ratio >= CONTRAST_RATIOS.AA_NORMAL;
  } else {
    return isLargeText ? ratio >= CONTRAST_RATIOS.AAA_LARGE : ratio >= CONTRAST_RATIOS.AAA_NORMAL;
  }
};

/**
 * È´ò„Ç≥„É≥„Éà„É©„Çπ„ÉàËâ≤„ÇíÁîüÊàê
 */
export const generateHighContrastColor = (baseColor: string, backgroundColor: string = '#FFFFFF'): string => {
  const currentRatio = calculateContrastRatio(baseColor, backgroundColor);
  
  if (currentRatio >= CONTRAST_RATIOS.AAA_NORMAL) {
    return baseColor; // Êó¢„Å´ÂçÅÂàÜ„Å™„Ç≥„É≥„Éà„É©„Çπ„Éà
  }
  
  // ËÉåÊôØ„ÅåÊòé„Çã„ÅÑÂ†¥Âêà„ÅØÈªí„ÄÅÊöó„ÅÑÂ†¥Âêà„ÅØÁôΩ„Å´„Åô„ÇãÁ∞°ÊòìÂÆüË£Ö
  const bgRgb = hexToRgb(backgroundColor);
  if (!bgRgb) return baseColor;
  
  const bgLuminance = getRelativeLuminance(bgRgb.r, bgRgb.g, bgRgb.b);
  return bgLuminance > 0.5 ? '#000000' : '#FFFFFF';
};

/**
 * „Çø„ÉÉ„Éó„Çø„Éº„Ç≤„ÉÉ„Éà„Çµ„Ç§„Ç∫„ÇíÊ§úË®º
 */
export const validateTapTargetSize = (width: number, height: number): {
  isValid: boolean;
  adjustedWidth: number;
  adjustedHeight: number;
} => {
  const adjustedWidth = Math.max(width, MIN_TAP_TARGET_SIZE);
  const adjustedHeight = Math.max(height, MIN_TAP_TARGET_SIZE);
  
  return {
    isValid: width >= MIN_TAP_TARGET_SIZE && height >= MIN_TAP_TARGET_SIZE,
    adjustedWidth,
    adjustedHeight
  };
};

/**
 * ÁâáÊâãÊìç‰Ωú„Çæ„Éº„É≥„ÇíË®àÁÆó
 */
export const calculateOneHandedZones = () => {
  const { width, height } = Dimensions.get('window');
  
  // ‰∏ÄËà¨ÁöÑ„Å™„Çπ„Éû„Éº„Éà„Éï„Ç©„É≥„Åß„ÅÆË¶™Êåá„ÅÆÂà∞ÈÅîÁØÑÂõ≤
  const thumbReachRadius = Math.min(width, height) * 0.4;
  
  return {
    easy: {
      // ÁîªÈù¢‰∏ãÈÉ®‰∏≠Â§Æ„Çí‰∏≠ÂøÉ„Å®„Åó„ÅüÂÜÜÂΩ¢È†òÂüü
      centerX: width / 2,
      centerY: height - 100, // ‰∏ã„Åã„Çâ100dp
      radius: thumbReachRadius * 0.7
    },
    medium: {
      centerX: width / 2,
      centerY: height - 100,
      radius: thumbReachRadius
    },
    hard: {
      // ÁîªÈù¢‰∏äÈÉ®È†òÂüü
      top: 0,
      bottom: height - thumbReachRadius * 1.2,
      left: 0,
      right: width
    }
  };
};

/**
 * Â∫ßÊ®ô„ÅåÁâáÊâãÊìç‰Ωú„Åó„ÇÑ„Åô„ÅÑ„Çæ„Éº„É≥„Å´„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
 */
export const isInOneHandedZone = (x: number, y: number, zone: 'easy' | 'medium' = 'medium'): boolean => {
  const zones = calculateOneHandedZones();
  const targetZone = zones[zone];
  
  if ('radius' in targetZone) {
    const distance = Math.sqrt(
      Math.pow(x - targetZone.centerX, 2) + Math.pow(y - targetZone.centerY, 2)
    );
    return distance <= targetZone.radius;
  }
  
  return false;
};

/**
 * Ëâ≤Ë¶öÁï∞Â∏∏„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
 */
export const simulateColorBlindness = (
  color: string, 
  type: 'protanopia' | 'deuteranopia' | 'tritanopia'
): string => {
  const rgb = hexToRgb(color);
  if (!rgb) return color;
  
  let { r, g, b } = rgb;
  
  // Á∞°ÊòìÁöÑ„Å™Ëâ≤Ë¶öÁï∞Â∏∏„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
  switch (type) {
    case 'protanopia': // 1ÂûãËâ≤Ë¶öÔºàËµ§„ÅÆÊÑüÂèóÊÄß‰Ωé‰∏ãÔºâ
      r = 0.567 * r + 0.433 * g;
      g = 0.558 * r + 0.442 * g;
      b = 0.242 * g + 0.758 * b;
      break;
      
    case 'deuteranopia': // 2ÂûãËâ≤Ë¶öÔºàÁ∑ë„ÅÆÊÑüÂèóÊÄß‰Ωé‰∏ãÔºâ
      r = 0.625 * r + 0.375 * g;
      g = 0.7 * r + 0.3 * g;
      b = 0.3 * g + 0.7 * b;
      break;
      
    case 'tritanopia': // 3ÂûãËâ≤Ë¶öÔºàÈùí„ÅÆÊÑüÂèóÊÄß‰Ωé‰∏ãÔºâ
      r = 0.95 * r + 0.05 * g;
      g = 0.433 * g + 0.567 * b;
      b = 0.475 * g + 0.525 * b;
      break;
  }
  
  // RGBÂÄ§„Çí0-255„ÅÆÁØÑÂõ≤„Å´Âà∂Èôê
  r = Math.max(0, Math.min(255, Math.round(r)));
  g = Math.max(0, Math.min(255, Math.round(g)));
  b = Math.max(0, Math.min(255, Math.round(b)));
  
  // 16ÈÄ≤Êï∞„Ç´„É©„Éº„Ç≥„Éº„Éâ„Å´Â§âÊèõ
  return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
};

/**
 * „ÉÜ„Ç≠„Çπ„Éà„Çµ„Ç§„Ç∫„ÇíÂãïÁöÑ„Å´Ë™øÊï¥
 */
export const adjustTextSize = (baseSize: number, multiplier: number): number => {
  return Math.round(baseSize * Math.max(1.0, Math.min(2.0, multiplier)));
};

/**
 * „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Áõ£ÊüªÁµêÊûú„ÅÆÂûãÂÆöÁæ©
 */
export interface AccessibilityAuditResult {
  componentName: string;
  issues: AccessibilityIssue[];
  score: number; // 0-100
  timestamp: Date;
}

export interface AccessibilityIssue {
  type: 'contrast' | 'tap-target' | 'label' | 'focus' | 'semantic';
  severity: 'error' | 'warning' | 'info';
  description: string;
  element: string;
  suggestion: string;
}

/**
 * „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Áõ£Êüª„ÇíÂÆüË°å
 */
export const auditAccessibility = (
  componentName: string,
  elements: {
    type: string;
    props: any;
    dimensions?: { width: number; height: number };
  }[]
): AccessibilityAuditResult => {
  const issues: AccessibilityIssue[] = [];
  let score = 100;
  
  elements.forEach((element, index) => {
    const elementId = `${element.type}-${index}`;
    
    // „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„É©„Éô„É´„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    if (!element.props.accessibilityLabel && !element.props.children) {
      issues.push({
        type: 'label',
        severity: 'error',
        description: '„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„É©„Éô„É´„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì',
        element: elementId,
        suggestion: 'accessibilityLabel „Éó„É≠„Éë„ÉÜ„Ç£„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ'
      });
      score -= 20;
    }
    
    // „Çø„ÉÉ„Éó„Çø„Éº„Ç≤„ÉÉ„Éà„Çµ„Ç§„Ç∫„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
    if (element.dimensions) {
      const validation = validateTapTargetSize(element.dimensions.width, element.dimensions.height);
      if (!validation.isValid) {
        issues.push({
          type: 'tap-target',
          severity: 'warning',
          description: `„Çø„ÉÉ„Éó„Çø„Éº„Ç≤„ÉÉ„Éà„ÅåÂ∞è„Åï„Åô„Åé„Åæ„Åô (${element.dimensions.width}x${element.dimensions.height}dp)`,
          element: elementId,
          suggestion: `ÊúÄÂ∞è„Çµ„Ç§„Ç∫„Çí${MIN_TAP_TARGET_SIZE}x${MIN_TAP_TARGET_SIZE}dp„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ`
        });
        score -= 10;
      }
    }
  });
  
  return {
    componentName,
    issues,
    score: Math.max(0, score),
    timestamp: new Date()
  };
};

/**
 * „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âõ∫Êúâ„ÅÆ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Éò„É´„Éë„Éº
 */
export const platformAccessibilityHelpers = {
  /**
   * iOSÂõ∫Êúâ„ÅÆ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ë®≠ÂÆö
   */
  ios: {
    enableAccessibilityEscape: () => ({
      accessibilityActions: [{ name: 'escape', label: 'Êàª„Çã' }],
      onAccessibilityAction: (event: any) => {
        if (event.nativeEvent.actionName === 'escape') {
          // Êàª„ÇãÂá¶ÁêÜ
        }
      }
    })
  },
  
  /**
   * AndroidÂõ∫Êúâ„ÅÆ„Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£Ë®≠ÂÆö
   */
  android: {
    enableAccessibilityLiveRegion: (politeness: 'none' | 'polite' | 'assertive' = 'polite') => ({
      accessibilityLiveRegion: politeness
    })
  },
  
  /**
   * „ÇØ„É≠„Çπ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Ë®≠ÂÆö
   */
  common: {
    createAccessibleComponent: (label: string, hint?: string, role?: string) => ({
      accessible: true,
      accessibilityLabel: label,
      accessibilityHint: hint,
      accessibilityRole: role as any
    })
  }
};

/**
 * „Ç¢„ÇØ„Çª„Ç∑„Éì„É™„ÉÜ„Ç£„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±„ÇíÂá∫Âäõ
 */
export const debugAccessibility = (componentName: string, props: any) => {
  if (__DEV__) {
    console.group(`üîç Accessibility Debug: ${componentName}`);
    console.log('Props:', {
      accessible: props.accessible,
      accessibilityLabel: props.accessibilityLabel,
      accessibilityHint: props.accessibilityHint,
      accessibilityRole: props.accessibilityRole,
      accessibilityState: props.accessibilityState
    });
    
    if (!props.accessibilityLabel && !props.children) {
      console.warn('‚ö†Ô∏è  accessibilityLabel „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    }
    
    console.groupEnd();
  }
};